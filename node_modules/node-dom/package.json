{
  "_args": [
    [
      {
        "raw": "node-dom",
        "scope": null,
        "escapedName": "node-dom",
        "name": "node-dom",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\WebDev\\MasterCard"
    ]
  ],
  "_from": "node-dom@latest",
  "_id": "node-dom@0.1.0",
  "_inCache": true,
  "_location": "/node-dom",
  "_npmUser": {
    "name": "ayms",
    "email": "avitte@jcore.fr"
  },
  "_npmVersion": "1.1.59",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-dom",
    "scope": null,
    "escapedName": "node-dom",
    "name": "node-dom",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/node-dom/-/node-dom-0.1.0.tgz",
  "_shasum": "6143b3fe354961e3de998a916c634d13a2453f06",
  "_shrinkwrap": null,
  "_spec": "node-dom",
  "_where": "D:\\WebDev\\MasterCard",
  "author": {
    "name": "Aymeric Vitte",
    "email": "avitte@jcore.fr",
    "url": "http://www.jcore.fr"
  },
  "contributors": [],
  "dependencies": {},
  "description": "Javascript fast W3C DOM generation.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "6143b3fe354961e3de998a916c634d13a2453f06",
    "tarball": "https://registry.npmjs.org/node-dom/-/node-dom-0.1.0.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "http://www.jcore.fr",
  "keywords": [
    "dom",
    "html",
    "js",
    "style",
    "css",
    "w3c",
    "javascript",
    "ajax"
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "main": "./lib/dom.js",
  "maintainers": [
    {
      "name": "ayms",
      "email": "avitte@jcore.fr"
    }
  ],
  "name": "node-dom",
  "optionalDependencies": {},
  "readme": "node-dom\n===\n\nJavascript fast DOM generation.\n\n## Purpose:\n\nFast javascript implementation of the W3C DOM.\n\nIt is  a mix of W3C / WHATWG specifications and specific performances optimizations for server side use fully compliant at the end with W3C standards.\n\nIt does implement what is mostly used and returns an acceptable result for what is rarely used.\n\nIt does handle scripts, styles, links, images, xhr and cookies.\n\nIt does not handle virtual rendering, stylesheets (but can load links) and events (except onload), but does not crash if not implemented features are used.\n\n## Install :\n\n    npm install node-dom\n\nor\n\n    git clone http://github.com/Ayms/node-dom.git\n    cd node-dom\n    npm link .\n\t\nComplementary modules :\n\t[Ayms/node-Tor](https://github.com/Ayms/node-Tor)\n\t[Ayms/node-cookies](https://github.com/Ayms/node-cookies)\n\t[driverdan/node-XMLHttpRequest](https://github.com/driverdan/node-XMLHttpRequest)\n\t[rsms/node-imagemagick](https://github.com/rsms/node-imagemagick)\n\n## Simple case :\n\n\tsimple.js :\n\t\n````\n\tvar request = require('request'),\n\t\tdom = require('node-dom').dom,\n\t\tfs = require('fs'),   \n\t\tURL = require('url');\n\t\t\n\tvar\targs = require('tav').set({\n\t\t\t\t\turl:{\n\t\t\t\t\tnote:'URL of the page to parse'\n\t\t\t\t\t}\n\t\t\t\t},'node-dom for node.js',true);\n\n\tvar url = URL.parse(args.url);\n\n\tvar req = {uri:url.href};\n\n\trequest(req,function (error, response, page) {\n\t\n\t\tif (!error && response.statusCode == 200) {\n\t\t\t\n\t\t\tvar options =\t{\turl:url,\n\t\t\t\t\t\t\t\tfeatures: {\n\t\t\t\t\t\t\t\t\t\t\tFetchExternalResources  : {script:'', img:'', input:'', link:''},\n\t\t\t\t\t\t\t\t\t\t\tProcessExternalResources: {script:'',img:'',link:'',input:''},\n\t\t\t\t\t\t\t\t\t\t\tremoveScript: true //Remove scripts for innerHTML and outerHTML output\n\t\t\t\t\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\twindow=dom(page,null,options); //global\n\t\t\t\n\t\t\tdocument=window.document; //global\n\t\t\t\n\t\t\tdocument.onload=function() {\n\t\t\t//Warning : you are not in the window context here (ie you can not access window's global var as global variables directly)\n\t\t\t//Context are explained here https://github.com/joyent/node/issues/1674\n\t\t\t\t\t\n\t\t\t\tfs.writeFile('./outer.html', document.html.outerHTML, function (err) {});\n\t\t\t\t//check the result in outer.html file\n\t\t\t\t//to test the result in a browser, don't forget to put the base tag after <head> with the correct href\n\t\t\t\t};\n\t\t};\n\t});\n````\n\n#### Example : node simple.js --url=http://www.example.com\n\n## Medium case :\n\n\tmedium.js :\n\t\n````\n\tvar request = require('request'),\n\t\tdom = require('node-dom').dom,\n\t\tfs = require('fs'),   \n\t\tURL = require('url');\n\t\t\n\tvar\targs = require('tav').set({\n\t\t\t\t\turl:{\n\t\t\t\t\t\tnote:'URL of the page to parse'\n\t\t\t\t\t},\n\t\t\t\t\tpost:{\n\t\t\t\t\t\tvalue:'',\n\t\t\t\t\t\tnote:'Post parameters'\n\t\t\t\t\t}\n\t\t\t\t},'dom-node for node.js',true);\n\n\tvar url = URL.parse(args.url);\n\n\tvar req = {uri:url.href};\n\n\tif (args.post) {\n\t\treq['method'] = 'post';\n\t\treq['body'] = args.post;\n\t};\n\n\trequest(req,function (error, response, page) {\n\t\n\t\tif (!error && response.statusCode == 200) {\n\t\t\t\n\t\t\tvar options =\t{\turl:url,\n\t\t\t\t\t\t\t\tfeatures: {\n\t\t\t\t\t\t\t\t\t\t\tFetchExternalResources  : {script:'', img:'', input:'', link:''},\n\t\t\t\t\t\t\t\t\t\t\tProcessExternalResources: {script:'',img:'',link:'',input:''},\n\t\t\t\t\t\t\t\t\t\t\tremoveScript: true, //Remove scripts for innerHTML and outerHTML output\n\t\t\t\t\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\twindow=dom(page,null,options); //global\n\t\t\t\n\t\t\tdocument=window.document; //global\n\t\t\t\n\t\t\tdocument.onload=function() {\n\t\t\t//Warning : you are not in the window context here (ie you can not access window global var as global variables directly)\n\t\t\t//Contexts are explained here https://github.com/joyent/node/issues/1674\n\t\t\t//Add your code and do what you have to do with the DOM\n\t\t\t\t\n\t\t\t\tfs.writeFile('./outer.html', document.html.outerHTML, function (err) {});\n\t\t\t\t//check the result in outer.html file\n\t\t\t\t//to test the result in a browser, don't forget to put the base tag after <head> with the correct href\n\t\t\t\t\n\t\t\t\t//Example, add your class\n\t\t\t\t//var MyClass = new require('MyClass').MyClass();\n\t\t\t\t//window.$=window.jQuery=require('jQuery').jQuery (invention here, let's say you want to use jQuery)\n\t\t\t\t\n\t\t\t\t//Do what you have to do with the DOM\n\t\t\t\t//Ex1 : MyClass.do_some_stuff_in_the_page();\n\t\t\t\t//Ex2 : Use jQuery\n\t\t\n\t\t\t};\n\t\t};\n\t});\n````\n\n#### Example : node medium.js --url=http://www.example.com\n\n## Complete case :\n\n\tcomplete.js :\n\t\n````\n\tvar request = require('request'),\n\t\tdom = require('node-dom').dom,\n\t\tfs = require('fs'),   \n\t\tURL = require('url'),\n\t\tcookies = require('node-cookies'),\n\t\tcookieJar = cookies.cookieJar;\n\t\t\n\tvar\targs = require('tav').set({\n\t\t\t\t\turl:{\n\t\t\t\t\t\tnote:'URL of the page to parse'\n\t\t\t\t\t},\n\t\t\t\t\tcookies:{\n\t\t\t\t\t\tvalue:'/tmp/cookies.txt',\n\t\t\t\t\t\tnote:'Where to store cookies'\n\t\t\t\t\t},\n\t\t\t\t\tpost:{\n\t\t\t\t\t\tvalue:'',\n\t\t\t\t\t\tnote:'Post parameters'\n\t\t\t\t\t}\n\t\t\t\t},'dom-node for node.js',true);\n\n\tvar url = URL.parse(args.url);\n\n\tvar req = {uri:url.href};\n\n\t//check if the cookie file exists - create it if not\n\ttry {fs.statSync(args.cookies);} catch(ee) {fs.writeFile(args.cookies,'',function(err) {});}\n\tvar fullJar = new cookieJar(args.cookies);\n\tvar jar = fullJar.extractCookiesForUrl(url.href);\n\tvar cookiestr = jar.cookiesForUrl();\n\treq['headers'] = { Cookies:cookiestr };\n\n\tif (args.post!=''){\n\t\treq['method'] = 'post';\n\t\treq['body'] = args.post;\n\t};\n\n\trequest(req,function (error, response, page) {\n\n\t\t\tif (!error && response.statusCode == 200) {\n\t\t\t\n\t\t\t\t// update cookies sent by the server\n\n\t\t\t\tif (response.headers['set-cookie']){\n\t\t\t\t\tjar.setCookiesForUrl(response.headers['set-cookie']);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tvar options =\t{\turl:url,\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tfeatures: {\n\t\t\t\t\t\t\t\t\t\t\t\tFetchExternalResources  : {script:'', img:'', input:'', link:''},\n\t\t\t\t\t\t\t\t\t\t\t\tProcessExternalResources: {script:'',img:'',link:'',input:''},\n\t\t\t\t\t\t\t\t\t\t\t\tremoveScript: true, //Remove scripts for innerHTML and outerHTML output\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcookie: jar\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\twindow=dom(page,null,options); //global\n\t\t\t\t\n\t\t\t\tdocument=window.document; //global\n\t\t\t\t\n\t\t\t\tdocument.onload=function() {\n\t\t\t\t//Warning : you are not in the window context here (ie you can not access window global var as global variables directly)\n\t\t\t\t//Contexts are explained here https://github.com/joyent/node/issues/1674\n\t\t\t\t//Add your code and do what you have to do with the DOM\n\t\t\t\t\t\n\t\t\t\t\tfs.writeFile('./outer.html', document.html.outerHTML, function (err) {});\n\t\t\t\t\t//check the result in outer.html file\n\t\t\t\t\t//to test the result in a browser, don't forget to put the base tag after <head> with the correct href\n\t\t\t\t\t\n\t\t\t\t\t//Example, add your class\n\t\t\t\t\t//var MyClass = new require('MyClass').MyClass();\n\t\t\t\t\t//window.$=window.jQuery=require('jQuery').jQuery (invention here, let's say you want to use jQuery)\n\t\t\t\t\t\n\t\t\t\t\t//Do what you have to do with the DOM\n\t\t\t\t\t//Ex1 : MyClass.do_some_stuff_in_the_page();\n\t\t\t\t\t//Ex2 : Use jQuery\n\t\t\t\t\t\n\t\t\t\t\t//save cookies\n\t\t\t\t\tcookies.mergeJar(fullJar,document._cookie).saveToFile(args.cookies);\n\t\t\t\t};\n\t\t\t};\n\t});\n````\n#### Example : node complete.js --url=http://www.example.com --cookies=./cookies.txt\n\n## Options and arguments :\n\ndom(page,level,options) : level is not used\n\n\toptions =\t{\t\n\t\t\t\t\t\t\t\turl:url,\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tfeatures: {\n\t\t\t\t\t\t\t\t\t\t\tFetchExternalResources  : {script:'', img:'', input:'', link:''},\n\t\t\t\t\t\t\t\t\t\t\tProcessExternalResources: {script:'',img:'',link:'',input:''},\n\t\t\t\t\t\t\t\t\t\t\tremoveScript: true, //Remove scripts for innerHTML and outerHTML output\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcookie: jar\n\t};\n\nRemove from features if you don't want to use it :\n\n- script : load and execute scripts\n- link : load links\n- img/input : load images and background images, retrieve the size, assign width/height to the objects\n- removeScript : it's generally useless to keep scripts in inner/outerHTML output, so default should be true. Whatever is the setting, scripts present in innerHTML or outerHTML will not execute as it is specified in standards.\n\t\t\n\n## Resources sequencing :\n\nUnlike browsers scripts execution is a little defer here, so it can not block the construction of the DOM, scripts are loaded and queued (inline and outside), then executed in the right order on document.close() (which queue document) and onload is fired.\n\nSince scripts can add others, queue can still extend after document complete (then their execution can happen after readyState \"complete\").\n\nWhen queue is empty, scripts are executed right away and onload is fired.\n\nScripts that fail will be re-executed after a certain delay, see comments in the code why it can happen.\n\nSame happens for links.\n\nImages are loaded asynchronously, same image is loaded just once, then width/height are set to objects related to this image.\n\n## Tunnelling with node-Tor :\n\n\tTODO\n\n## Tests :\n\n\tSee test/tests.txt\n\t\nTested on google, yahoo, msn web sites, usual js frameworks (jQuery, YUI, prototype, mootools,...) and unbelievable usual web sites.\n\nOther applications using node-dom :\n\n[Ayms/node-bot](https://github.com/Ayms/node-bot)\n[Ayms/node-gadgets](https://github.com/Ayms/node-gadgets)\n[Ayms/node-googleSearch](https://github.com/Ayms/node-googleSearch)\n",
  "repository": {
    "url": ""
  },
  "version": "0.1.0"
}
